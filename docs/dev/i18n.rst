.. doctest docs/dev/i18n.rst

Internationalization
====================

An introduction to translatable strings.

..  You can test only this document by issuing:

      $ python setup.py test -s tests.DocsTests.test_i18n

    Doctest initialization:

    >>> from lino import startup
    >>> startup('lino_book.projects.docs.settings.demo')
    >>> from lino.api.shell import *

Django uses the gettext system for providing internationalization.

In your application code, you import Django's :func:`ugettext`
function (usually aliased as :func:`_`) and call it on any string that
you want the user to see in their language.

>>> from django.utils.translation import ugettext as _

If no language is activated, :func:`ugettext` just returns the English
text:

>>> print(_("January"))
January

In Lino we usually use the :func:`translation.override` context when
we want to translate:

>>> from django.utils import translation
>>> with translation.override('fr'):
...     print(_("January"))
janvier

How does the :func:`ugettext` function know that "January" is
"janvier" in French? See :cmd:`inv mm`.

Note that :func:`ugettext` will do the lookup in-place. The following
code prints English and not German:

>>> s = _("January")
>>> with translation.override('de'):
...     print(s)
January

But Django has a lazy version of :func:`ugettext`

>>> from django.utils.translation import ugettext_lazy as _
>>> s = _("January")
>>> with translation.override('de'):
...     print(str(s))
Januar

    
.. With Django until 1.6 we had a strange behaviour (but the following
   snippet would fail in newer Django versions and therefore is not
   tested anymore)::

    >> with translation.override('de'):
    ...     print(s)  #doctest: +ELLIPSIS
    <django.utils.functional.__proxy__ object at ...>


