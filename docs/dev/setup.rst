.. _dev.setup_info:

====================================
How Lino applications use `setup.py`
====================================


.. How to test just this file:

   $ doctest docs/dev/setup.rst

This document describes a trick which does not depend on Lino and
which we recommend to use for any Python project.

The :xfile:`setup.py` file
==========================


.. xfile:: setup.py

    A file named :xfile:`setup.py` is part of the `minimal structure
    <http://python-packaging.readthedocs.io/en/latest/minimal.html>`__
    of every Python project.  It is in the root directory of a project
    and contains information about the project, e.g. the **version
    number** or the **dependencies** (i.e. which other Python packages
    must be installed when using your package). The information in
    this file is used for running test suites, installing the project
    in different environments, etc...


The problem
===========

Usually the setup information is directly contained in the file
:xfile:`setup.py`. The problem with
this layout is that this :xfile:`setup.py` file is not available at
runtime.

For example the **version number**. You need it of course in the
:xfile:`setup.py`, but there are quite some projects which want to
show somehow their version.  So they need it at runtime as well.  And
that number changes often. You don't want to store it in two different
places.

Is there a way to have setup information both in a central place
**and** accessible at runtime?


The solution
============

To solve this problem, we store the setup information in a separate
file (which we usually name :xfile:`setup_info.py`) and which we
execute from both our :xfile:`setup.py` and our packages's main
:xfile:`__init__.py` file.



.. xfile:: setup_info.py

    The file which contains the information for Python's `setup.py`
    script.

So that's why the :xfile:`setup.py` of a Lino application contains
just this::

    from setuptools import setup
    fn = 'lino/setup_info.py')
    exec(compile(open(fn, "rb").read(), fn, 'exec'))
    if __name__ == '__main__':
        setup(**SETUP_INFO)
    
And the :file:`__init__.py` file of the main module contains this::

    from os.path import join, dirname
    fn = join(dirname(__file__), 'setup_info.py')
    exec(compile(open(fn, "rb").read(), fn, 'exec'))
    __version__ = SETUP_INFO.get('version')


Note that ``exec(compile(open(fn, "rb").read(), fn, 'exec'))`` is
equivalent to ``execfile(fn)``, except that it works in both Python 2
and 3.
    


Usage example:

>>> import lino
>>> print lino.SETUP_INFO['description']
A framework for writing desktop-like web applications using Django and ExtJS

Setup information
=================

The :func:`setup` function has a lot of keyword parameters which are
documented elsewhere.

.. _install_requires:

install_requires
----------------

See http://python-packaging.readthedocs.io/en/latest/dependencies.html

.. _tests_require:

tests_require
-------------

See http://python-packaging.readthedocs.io/en/latest/dependencies.html


.. _long_description:

long_description
----------------

This contains the description to be published on PyPI.

Lino usually inserts this in the :xfile:`api/index.rst` file of the
docs tree.

This is used by :cmd:`inv bd` as the source text for generating the
project's :xfile:`README.rst`.


The :xfile:`README.rst` file
============================

.. xfile:: README.rst

    A file named ``README`` (or some variant thereof) should be in the
    root directory of every public code repository and should contain
    a description of your project, links to more detailed
    documentation, ...

    In Atelier projects this file is automatically generated from the
    :ref:`long_description` by the :cmd:`inv bd`.


The :xfile:`MANIFEST.in` file
=============================

.. xfile:: MANIFEST.in

    TODO
