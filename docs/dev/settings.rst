=============================
Lino and your Django settings
=============================

This section explains some basic things about your Django settings and
Lino.
See also :doc:`/admin/settings`.

.. _settings:

Django settings module
======================

The **Django settings module** is the most important thing in Django.
Almost everything you do with Django requires the settings module to
be loaded. Django does that automagically as soon as you import some
module which needs the settings. And when that moment arrives, Django
needs to know the name of your settings module. 

You can specify this either using the :envvar:`DJANGO_SETTINGS_MODULE`
environment variable or the `--settings` command-line option of
certain admin commands.

To illustrate this, let's open a Python session in an environment with
Django installed but *without* any :envvar:`DJANGO_SETTINGS_MODULE`
environment variable defined, and then type:

>>> from django.conf import settings

This will pass. But as soon as you want to actually access some
attribute of `settings`, you will get an `ImproperlyConfigured`
exception:

>>> print(settings.DEBUG)
Traceback (most recent call last):
...
ImproperlyConfigured: Requested setting DEBUG, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.

.. rubric:: Summary

.. envvar:: DJANGO_SETTINGS_MODULE
  
The :envvar:`DJANGO_SETTINGS_MODULE` environment variable is expected
to contain the *Python name* of the `Django settings module`_. 

The Django settings module must be importable. That is, if
:envvar:`DJANGO_SETTINGS_MODULE` contains e.g. ``foo.bar.baz``, then
Django will do the equivalent of ``import foo.bar.baz``.

.. xfile:: settings.py

When we speak about "the :xfile:`settings.py` file", then we actually
mean the `Django settings module`_.  That's because the filename of a
Django settings module is often in a file named :xfile:`settings.py`.
But in reality it can be some arbitrary filename.



How Lino integrates into Django settings
========================================

Here is a typical :xfile:`settings.py` file of a Lino project::

  from foo.bar.settings import *
  SITE = Site(globals())
  # ... your local settings here

That is, you import the content of some existing Lino project into
your local settings module and then define a :setting:`SITE` variable.

.. setting:: SITE

A Lino :xfile:`settings.py` file always contains the following line::

  SITE = Site(globals())

This line instantiates your local :setting:`SITE` object.  Every Lino
application requires a setting named :setting:`SITE` which must be a
:class:`Site <lino.core.site.Site>` instance.

The :setting:`SITE` setting is what turns your Django project into a
Lino application.

More about this in :doc:`site`.

Inheriting settings
===================

Lino helps you to keep :xfile:`settings.py` files small because it
delegates the responsibility of maintaining default values for Django
settings to the application developer.

The typical local :xfile:`settings.py` file for a Lino project
consists of two lines (plus, on a production site, the lines for
defining your :setting:`DATABASES` setting). Compare this to a
:file:`settings.py` file generated by Django's `startproject` command
which contains already 82 lines of text (Django version 1.6.9).


Settings packages
=================

In some projects we use a whole package of settings:

- :file:`settings/__init.py` : the base for all modules of this
  package.
  
- :file:`settings/demo.py` : instantiates a :setting:`SITE` variable
  and thus is designed to be used directly as a
  :setting:`DJANGO_SETTINGS_MODULE`.



.. _lino.site_module:

Site-wide default settings
==========================

Lino applications (unlike Django projects) have a hook for specifying
site-wide default values for their Django settings.
This concept is mostly useful on servers where many Lino sites are
running (as described in :ref:`lino.admin.site_module`).
Actually they are not system-wide but environment-wide.

.. envvar:: LINO_SITE_MODULE

Each time a Lino process starts (when a :class:`lino.core.site.Site`
gets instantiated), it checks whether an environment variable
:envvar:`LINO_SITE_MODULE` is exists.  And if it does, Lino expects it
to be the name of a Python module, will import that module and, if it
contains a function named ``setup_site``, will call that function,
passing it the `Site` instance as one and only positional parameter.

For example you can do::

  $ export LINO_SITE_MODULE=my_site_options

And then create a file named :xfile:`my_site_options.py` somewhere on
your :envvar:`PYTHONPATH` with the following content::

    def setup_site(self):
        self.update_settings(ADMINS=[("John", "john.doe@example.com")])
        self.update_settings(EMAIL_HOST="mail.provider.com")
        self.update_settings(DEBUG=True)
        self.update_settings(ALLOWED_HOSTS=['127.0.0.1'])
        self.use_java = False

By convention we recommend to name that file :xfile:`lino_local.py`
and to set :envvar:`LINO_SITE_MODULE` to ``lino_local``.


.. rubric:: Keep in mind

.. xfile:: lino_local.py

:xfile:`lino_local.py` is a file containing site-wide local settings,
i.e. local settings to be applied to all projects.

The file just defines *default* values, individual projects can still
decide to override them.

This file is usually in a directory :file:`/usr/local/src/lino/`.

Lino will use these settings only if that directory is in
:envvar:`PYTHON_PATH` and if the project defines an environment
variable :envvar:`LINO_SITE_MODULE` containing the string
``lino_local``.

       

.. rubric:: Historic note

.. xfile:: djangosite_local.py

The :xfile:`djangosite_local.py` file was used until 20160109 as a
hard-coded :envvar:`LINO_SITE_MODULE`. Which had the disadvantage that
it was not easy to disable it quickly.

On servers where this was used, when upgrading to a Lino version after
20160109, you should set :envvar:`LINO_SITE_MODULE` to the string
``djangosite_local`` in order to maintain the old behaviour::

  export LINO_SITE_MODULE=djangosite_local



