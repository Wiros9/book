.. _noi.specs.care:

====================================
Lino Care, a social ticketing system
====================================

.. How to test only this document:

    $ python setup.py test -s tests.SpecsTests.test_care
    
    doctest init:

    >>> from lino import startup
    >>> startup('lino_book.projects.care.settings.doctests')
    >>> from lino.api.doctest import *

.. contents::
  :local:



Overview
========

**Lino Care** is a variant of :ref:`noi` specialized for organizations
who help people caring for each other.  These might be old people,
orphans, immigrants, disabled, addicts, or just "normal" people
without any handicap.

While :ref:`noi` was originally used as a ticketing system for the
:ref:`Lino team <lino.team>` and other open source software teams, we
realized that we can use almost the same concepts for managing "social
tickets".  A different context, but a similar database structure.


Design choices
==============

- Users do not actually need to access the Lino site. It is possible
  that a "**connector**" does the job of entering the information into
  Lino in behalf of the actual user.

- There is no difference between **care recipients** and **care
  providers**.  Both are stored as *system users*.  Any user can "call
  for help" by "opening a plea".

- The site maintains a catalogue of faculties_. This is a
  classification of the "needed services or things" which will make
  the connection recipient and provider. For example things like
  "table" or "a pair of shoes", or services like "Baby sitting",
  "English teaching" or "Pedicure".

  Every user can enter information about their **competences** and
  their **availability**.

- The application protects privacy of all users as much as possible.
  Neither providers nor recipients are listed publicly. All users must
  be confirmed after registration. There is a manager (one person or a
  team of several users) who does this job. The manager can see all
  users and their data.

- The care recipients can create new tickets and enter information
  about what kind of care they need. They cannot see who is going to
  help them. They cannot even see whether somebody is available at all
  for a given type of care.

- The care providers can see the incoming help requests for the kind
  of thing or service they provide. They can see the contact data of
  the user who asks for help.

  When they receive a notification about a help request, they must
  give feedback, e.g. they can *refuse* it (possibly specifying a
  reason like "I am not available" or "Request does not fit to what I
  can give").  If they decide to contact that person, then they should
  register this to the database: date and time of contact, a field for
  remarks, and (important) whether they decided to "take the ticket"
  or not after speaking with the recipient.

- Depending on the nature of the "service or thing", there must
  probably be additional information.


Implementation
==============

Lino Care is technically a sub-project of Lino Noi. It does not have a
Git repository on its own.  Everything specific to Lino Care is in
:mod:`lino_book.projects.care` and below.

The demo data for :ref:`care` is mostly being generated by
:mod:`lino_book.projects.care.lib.tickets.fixtures.demo`.


User types
==========

These user types are defined in :mod:`lino_book.projects.care.roles`:

>>> rt.show('users.UserTypes')
======= ============ ================== ==========================================
 value   name         text               User role
------- ------------ ------------------ ------------------------------------------
 000     anonymous    Anonymous          lino_care.lib.care.user_types.Anonymous
 100     user         User               lino_care.lib.care.user_types.EndUser
 200     consultant   Consultant         lino_care.lib.care.user_types.Consultant
 490     senior       Senior developer   lino_care.lib.care.user_types.Senior
 900     admin        Administrator      lino_care.lib.care.user_types.SiteAdmin
======= ============ ================== ==========================================
<BLANKLINE>


**Anonymous users** can (1) register, (2) log in, (3) see a list of
public help requests.

As a **simple user** you can

- configure your user profile (contact data, competences, preferences)
  
- create your own help requests ("Where I *need* help")
  :class:`tickets.MyTickets`
         
- answer to help requests of other users ("Where I *can* help")
  :class:`tickets.SuggestedTicketsByEndUser`.
  Here you can offer your help for a particular request.
  
- see your own help offer ("Where I *offered* help"). A help offer is
  when you declare that you agree to help with a given request. Your
  offer needs to be *accepted* by the requester before you actually
  get *engaged*.  :class:`votes.MyOffers`
  
- see your to-do list ("Where I *do* help"). This is a list of your
  help offers which have been accepted.  We call them *jobs*.
  :class:`votes.MyTasks`

As a **connector** you can manage these things in behalf of other
users (who chose to get represented by you instead of using the system
themselves).

Demo users
==========

As an **administrator** you can (additionally to the above) also
create new users, change the catalog of faculties, ...

The demo database has a set of **fictive users**. Let's introduce
them:

>>> rt.show('users.Users')
========== =============== ============ ===========
 Username   User type       First name   Last name
---------- --------------- ------------ -----------
 alex       User            Alex
 berta      User            Berta
 christa    User            Christa
 eric       Consultant      Eric
 robin      Administrator   Robin        Rood
 rolf       Administrator   Rolf         Rompen
 romain     Administrator   Romain       Raffault
========== =============== ============ ===========
<BLANKLINE>



Faculties
=========

Every Lino Care site has a catalog of **faculties**.

Faculties are the things that will make the connection between the
requester and the provider of help:

- A faculty is something for which users can declare to be
  **competent**.

- Every help request will require a given faculty.

The *Where can I help* list is based on your competences and the
required faculties of open requests, i.e. Lino will not bother you
with requests for which you aren't competent.


>>> rt.show(faculties.AllSkills)
... #doctest: +REPORT_UDIFF
========================== ============================= ============================ =============== ============ =========
 Designation                Designation (de)              Designation (fr)             Parent skill    Skill type   Remarks
-------------------------- ----------------------------- ---------------------------- --------------- ------------ ---------
 Babysitting                Babysitting                   Garde enfant
 Car driving                Fahrdienst                    Voiture
 French lessons             Französischunterricht         Cours de francais            Teaching
 Garden works               Gartenarbeiten                Travaux de jardin            Home & Garden
 German lessons             Deutschunterricht             Cours d'allemand             Teaching
 Go out with dogs           Hunde spazierenführen         Chiens
 Guitar lessons             Gitarrenunterricht            Cours de guitare             Music
 Hair cutting               Friseur                       Coiffure
 Home & Garden              Haus und Garten               Maison et jardin
 Maths lessons              Matheunterricht               Cours de maths               Teaching
 Mentoring elderly people   Gesellschafter für Senioren   Rencontres personnes agées
 Music                      Musik                         Musique
 Piano lessons              Klavierunterricht             Cours de piano               Music
 Renovation                 Renovierung                   Rénovation                   Home & Garden
 Repair works               Reparaturarbeiten             Travaux de réparation        Home & Garden
 Repairing clothes          Kleider reparieren            Réparer des vètements        Home & Garden
 Shopping                   Botengänge                    Commissions
 Teaching                   Unterricht                    Cours
 Translations               Übersetzungsarbeiten          Traductions
 Write letters              Briefe schreiben              Écrire des lettres
========================== ============================= ============================ =============== ============ =========
<BLANKLINE>


>>> rt.show(faculties.TopLevelSkills)
... #doctest: +REPORT_UDIFF
========================== ============================= ============================ ========= =================================================================== ==============
 Designation                Designation (de)              Designation (fr)             Remarks   Children                                                            Parent skill
-------------------------- ----------------------------- ---------------------------- --------- ------------------------------------------------------------------- --------------
 Babysitting                Babysitting                   Garde enfant
 Car driving                Fahrdienst                    Voiture
 Go out with dogs           Hunde spazierenführen         Chiens
 Hair cutting               Friseur                       Coiffure
 Home & Garden              Haus und Garten               Maison et jardin                       *Garden works*, *Renovation*, *Repair works*, *Repairing clothes*
 Mentoring elderly people   Gesellschafter für Senioren   Rencontres personnes agées
 Music                      Musik                         Musique                                *Guitar lessons*, *Piano lessons*
 Shopping                   Botengänge                    Commissions
 Teaching                   Unterricht                    Cours                                  *French lessons*, *German lessons*, *Maths lessons*
 Translations               Übersetzungsarbeiten          Traductions
 Write letters              Briefe schreiben              Écrire des lettres
========================== ============================= ============================ ========= =================================================================== ==============
<BLANKLINE>



>>> rt.show('faculties.Offers')
==== ========= ================ ============= ==========
 ID   User      Skill            Description   Affinity
---- --------- ---------------- ------------- ----------
 1    Alex      Translations                   100
 2    Berta     Translations                   100
 3    Alex      Garden works                   100
 4    Alex      Repair works                   100
 5    Christa   Piano lessons                  100
 6    Eric      Repair works                   100
 7    Eric      Guitar lessons                 100
 8    Eric      Shopping                       100
                                               **800**
==== ========= ================ ============= ==========
<BLANKLINE>


Configuring your preferences
============================

>>> show_choices('alex', '/choices/faculties/OffersByEndUser/faculty')
Babysitting
Car driving
French lessons
Garden works
German lessons
Go out with dogs
Guitar lessons
Hair cutting
Home & Garden
Maths lessons
Mentoring elderly people
Music
Piano lessons
Renovation
Repair works
Repairing clothes
Shopping
Teaching
Translations
Write letters


Topics
======

>>> rt.show('topics.Topics')
No data to display



>>> rt.show('tickets.AllTickets')
==== ========================================================================= ========= ======= ============== =========
 ID   Summary                                                                   Author    Topic   Actions        Mission
---- ------------------------------------------------------------------------- --------- ------- -------------- ---------
 8    Who would buy diapers for me in Aachen?                                   Alex              **Ready**
 7    Who can review my final work?                                             Eric              **Sleeping**
 6    Who helps my sont to prepare for a maths test on May 21? (5. grade PDS)   Berta             **Started**
 5    Who would play music on my birthday party?                                Alex              **Open**
 4    Who can give guitar lessons to my daughter?                               Alex              **Open**
 3    Who can give piano lessons to my son?                                     Eric              **Talk**
 2    My lawn needs mowing. On Thursday or Saturday.                            Christa           **New**
 1    My faucet is dripping, who can help?                                      Berta             **Closed**
==== ========================================================================= ========= ======= ============== =========
<BLANKLINE>


Voters by ticket
================

>>> def show_votes(pk):
...     obj = tickets.Ticket.objects.get(pk=pk)
...     print(str(obj))
...     rt.show('votes.VotesByVotable', obj)

Alex and Dora had voted for #1, Alex has been assigned and has done
his job. Dora's vote has been cancelled.

>>> show_votes(1)
#1 (☑ My faucet is dripping, who can help?)
Author: *Berta*
Done: *Alex*
Cancelled: *Eric*

Ticket #2 has not yet any vote:

>>> show_votes(2)
#2 (⛶ My lawn needs mowing. On Thursday or Saturday.)
Author: *Christa*

>>> show_votes(3)
#3 (☎ Who can give piano lessons to my son?)
Author: *Eric*
Candidate: *Christa*

>>> show_votes(4)
#4 (☉ Who can give guitar lessons to my daughter?)
Author: *Alex*

>>> show_votes(5)
#5 (☉ Who would play music on my birthday party?)
Author: *Alex*
Candidate: *Eric*, *Christa*



The main menu
=============

**Site administrators** have the following menu:

>>> rt.login('robin').show_menu()
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF
- Contacts : Persons, Organizations
- Votes : My vote invitations, My tasks, My candidatures, My watchlist
- Office : My Excerpts, My Comments, My Notification messages, My Uploads
- Tickets : My Tickets, Where I can help, Active tickets, All tickets, Unassigned Tickets, Reference Tickets
- Configure :
  - System : Site Parameters, Help Texts, Users
  - Places : Countries, Places
  - Contacts : Organization types, Functions
  - Topics : Topics, Topic groups
  - Office : Excerpt Types, Comment Types, Upload Types
  - Tickets : Missions, Projects (tree), Project Types, Ticket types
  - Skills : Skills (tree), Skills (all), Skill types
- Explorer :
  - System : content types, Authorities, User types, Changes, Notification messages, All dashboard widgets
  - Contacts : Contact Persons, Partners
  - Topics : Interests
  - Votes : All votes, Vote states
  - Office : Excerpts, Comments, Uploads, Upload Areas
  - Tickets : Dependencies, Ticket states, Wishes
  - Skills : Skill offers, Skill demands
- Site : About


**Simple** users have a very limited menu:

>>> rt.login('berta').show_menu()
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF
- Votes : My vote invitations, My tasks, My candidatures, My watchlist
- Office : My Comments, My Notification messages, My Uploads
- Tickets : My Tickets, Where I can help
- Explorer :
  - Tickets : Wishes
- Site : About

Lists of pleas
==============


My pleas
--------

  
>>> rt.login('christa').show(tickets.MyTickets)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE -REPORT_UDIFF
==================================================================== ===================================
 Description                                                          Actions
-------------------------------------------------------------------- -----------------------------------
 `#2 (⛶ My lawn needs mowing. On Thursday or Saturday.) <Detail>`__   [★] **New** → [☾] [☎] [☉] [⚒] [☐]
==================================================================== ===================================
<BLANKLINE>



Where I can help
----------------

>>> rt.login('eric').show(tickets.SuggestedTicketsByEndUser)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE -REPORT_UDIFF
======================================================================================= ============================= ==============
 Description                                                                             Needed skills                 Actions
--------------------------------------------------------------------------------------- ----------------------------- --------------
 `#5 (☉ Who would play music on my birthday party?) <Detail>`__  by `Alex <Detail>`__    `Music <Detail>`__            [★] **Open**
 `#4 (☉ Who can give guitar lessons to my daughter?) <Detail>`__  by `Alex <Detail>`__   `Guitar lessons <Detail>`__   [☆] **Open**
======================================================================================= ============================= ==============
<BLANKLINE>



My offers
---------

>>> rt.login('christa').show(votes.MyOffers)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE -REPORT_UDIFF
============================================================================================ ============================================
 Description                                                                                  Actions
-------------------------------------------------------------------------------------------- --------------------------------------------
 `#5 (☉ Who would play music on my birthday party?) <Detail>`__  by `Alex <Detail>`__         [★] **Candidate** → [Cancelled] [Watching]
 `#3 (☎ Who can give piano lessons to my son?) <Detail>`__  by `Eric <Detail>`__ for *Dora*   [★] **Candidate** → [Cancelled] [Watching]
============================================================================================ ============================================
<BLANKLINE>


>>> rt.login('eric').show(votes.MyOffers)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE -REPORT_UDIFF
====================================================================================== ============================================
 Description                                                                            Actions
-------------------------------------------------------------------------------------- --------------------------------------------
 `#5 (☉ Who would play music on my birthday party?) <Detail>`__  by `Alex <Detail>`__   [★] **Candidate** → [Cancelled] [Watching]
====================================================================================== ============================================
<BLANKLINE>



My tasks
--------

>>> rt.login('alex').show(votes.MyTasks)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE -REPORT_UDIFF
No data to display

>>> rt.login('alex').show(votes.MyVotes)
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE -REPORT_UDIFF
============================================================================================ ================
 Description                                                                                  Actions
-------------------------------------------------------------------------------------------- ----------------
 `#8 (☐ Who would buy diapers for me in Aachen?) <Detail>`__, assigned to `Eric <Detail>`__   [★] **Author**
 `#5 (☉ Who would play music on my birthday party?) <Detail>`__                               [★] **Author**
 `#4 (☉ Who can give guitar lessons to my daughter?) <Detail>`__                              [★] **Author**
 `#1 (☑ My faucet is dripping, who can help?) <Detail>`__  by `Berta <Detail>`__              [★] **Done**
============================================================================================ ================
<BLANKLINE>




Rating a help offer
===================

>>> base = '/choices/votes/Votes/rating'
>>> show_choices("robin", base + '?query=')
<br/>
Very good
Good
Satisfying
Deficient
Insufficient
Unratable


The detail layout of a ticket
=============================

Here is a textual description of the fields and their layout used in
the detail window of a ticket.

>>> from lino.utils.diag import py2rst
>>> print(py2rst(tickets.Tickets.detail_layout, True))
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF -SKIP
(main) [visible for all]:
- **General** (general_1):
  - (general1):
    - (general1_1): **Summary** (summary), **ID** (id)
    - (general1_2): **Author** (user), **End user** (end_user), **Deadline** (deadline)
    - (general1_3): **Topic** (topic), **Mission** (project)
    - (general1_4): **Actions** (workflow_buttons), **Private** (private)
    - (bottom_box) [visible for user consultant senior admin]:
      - (bottom_box_1): **Wanted skills** (faculties_DemandsByDemander), **Votes** (votes_VotesByVotable)
      - **Wishes** (deploy_DeploymentsByTicket)
  - **Comments** (comments_CommentsByRFC) [visible for user consultant senior admin]
- **More** (more):
  - (more_1):
    - (more1):
      - (more1_1): **Created** (created), **Modified** (modified), **Ticket type** (ticket_type)
      - (more1_2): **State** (state), **Reference** (ref), **Duplicate of** (duplicate_of), **Planned time** (planned_time), **Priority** (priority)
    - **Duplicates** (DuplicatesByTicket)
  - (more_2): **Description** (description), **Resolution** (upgrade_notes), **Dependencies** (tickets_LinksByTicket) [visible for senior admin]
- **History** (changes.ChangesByMaster) [visible for senior admin]
- **Uploads** (uploads_UploadsByController) [visible for user consultant senior admin]
<BLANKLINE>



