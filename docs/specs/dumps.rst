.. _book.specs.dumps:

=========================================
Python dumps
=========================================

.. to test just this doc:

    $ doctest docs/specs/dumps.rst

.. If this fails just because something has changed in the expected
   dump, then you need to run::

   $ python manage_a.py dump2py a --overwrite
   $ python manage_b.py dump2py b --overwrite


    


A series of usage examples for :ref:`Python dumps <dpy>`.

This uses :mod:`lino_book.projects.dumps`.

Files
=====

The :xfile:`models.py` file:

.. literalinclude:: ../../lino_book/projects/dumps/models.py

The demo fixture:

.. literalinclude:: ../../lino_book/projects/dumps/fixtures/demo.py

The dump generated by :manage:`dump2py`:

.. literalinclude:: ../../lino_book/projects/dumps/a/restore.py
.. literalinclude:: ../../lino_book/projects/dumps/a/dumps_foo.py


>>> from atelier.sheller import Sheller
>>> shell = Sheller("lino_book/projects/dumps")

First suite
===========

We initialize our database from our demo fixture:

>>> shell("python manage_a.py prep --noinput")
... #doctest: +ELLIPSIS
`initdb demo` started on database .../default.db.
Operations to perform:
  Synchronize unmigrated apps: about, bootstrap3, dumps, extjs, jinja, lino_startup, staticfiles
  Apply all migrations: (none)
Synchronizing apps without migrations:
  Creating tables...
    Creating table dumps_foo
    Running deferred SQL...
Running migrations:
  No migrations to apply.
Loading data from ...
Installed 2 object(s) from 1 fixture(s)

We try to call :manage:`dumpy` in some invalid ways (just to
demonstrate the possible error messages):

>>> shell("python manage_a.py dump2py")
... #doctest: +ELLIPSIS +NORMALIZE_WHITESPACE +REPORT_UDIFF
usage: manage_a.py dump2py [-h] [--version] [-v {0,1,2,3}] [--settings SETTINGS] [--pythonpath PYTHONPATH] [--traceback] [--no-color] [--noinput]
                           [--tolerate] [-o]
                           output_dir
manage_a.py dump2py: error: too few arguments


>>> shell("python manage_a.py dump2py a")
... #doctest: +ELLIPSIS
CommandError: Specified output_dir ...lino_book/projects/dumps/a already exists. Delete it yourself if you dare!

Here is now a correct call:

>>> shell("python manage_a.py dump2py tmp/a --overwrite")
... #doctest: +ELLIPSIS
Writing .../lino_book/projects/dumps/tmp/a/restore.py...
Wrote 2 objects to .../lino_book/projects/dumps/tmp/a/restore.py and siblings.

Verify that the newly created dump is as expected:

>>> shell("diff a tmp/a")
... #doctest: +ELLIPSIS
<BLANKLINE>

Load the dump, dump again and verify that both dumps are the same:

>>> shell("python manage_a.py run a/restore.py --noinput")
... #doctest: +ELLIPSIS
Unversioned Site instance : no database migration
`initdb ` started on database .../default.db.
Operations to perform:
  Synchronize unmigrated apps: about, bootstrap3, dumps, extjs, jinja, lino_startup, staticfiles
  Apply all migrations: (none)
Synchronizing apps without migrations:
  Creating tables...
    Creating table dumps_foo
    Running deferred SQL...
Running migrations:
  No migrations to apply.
Loading 2 objects to table dumps_foo...



>>> shell("python manage_a.py dump2py tmp/a --overwrite")
... #doctest: +ELLIPSIS
Writing .../lino_book/projects/dumps/tmp/a/restore.py...
Wrote 2 objects to .../lino_book/projects/dumps/tmp/a/restore.py and siblings.

>>> shell("diff a tmp/a")
... #doctest: +ELLIPSIS
<BLANKLINE>

Second suite
============

Now the same with `b`, i.e. with :setting:`USE_TZ` enabled:

>>> shell("python manage_b.py prep --noinput")
... #doctest: +ELLIPSIS
`initdb demo` started on database .../default.db.
Operations to perform:
  Synchronize unmigrated apps: about, bootstrap3, dumps, extjs, jinja, lino_startup, staticfiles
  Apply all migrations: (none)
Synchronizing apps without migrations:
  Creating tables...
    Creating table dumps_foo
    Running deferred SQL...
Running migrations:
  No migrations to apply.
Loading data from ...
Installed 2 object(s) from 1 fixture(s)

>>> shell("python manage_b.py dump2py tmp/b --overwrite")
... #doctest: +ELLIPSIS
Writing .../lino_book/projects/dumps/tmp/b/restore.py...
Wrote 2 objects to .../lino_book/projects/dumps/tmp/b/restore.py and siblings.

Verify that the newly created dump is as expected:

>>> shell("diff b tmp/b")
... #doctest: +ELLIPSIS
<BLANKLINE>

Load the dump, dump again and verify that both dumps are the same:

>>> shell("python manage_b.py run b/restore.py --noinput")
... #doctest: +ELLIPSIS
Unversioned Site instance : no database migration
`initdb ` started on database .../default.db.
Operations to perform:
  Synchronize unmigrated apps: about, bootstrap3, dumps, extjs, jinja, lino_startup, staticfiles
  Apply all migrations: (none)
Synchronizing apps without migrations:
  Creating tables...
    Creating table dumps_foo
    Running deferred SQL...
Running migrations:
  No migrations to apply.
Loading 2 objects to table dumps_foo...


>>> shell("python manage_b.py dump2py tmp/b --overwrite")
... #doctest: +ELLIPSIS
Writing .../lino_book/projects/dumps/tmp/b/restore.py...
Wrote 2 objects to .../lino_book/projects/dumps/tmp/b/restore.py and siblings.

>>> shell("diff b tmp/b")
... #doctest: +ELLIPSIS
<BLANKLINE>




